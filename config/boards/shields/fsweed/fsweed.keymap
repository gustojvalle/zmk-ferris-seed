/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>



/{
    behaviors
    {
        stickymt: stickymt{
            compatible = "zmk,behavior-hold-tap";
            label = "STICKYMT";
            #binding-cells = <2>;
            tapping-term-ms = <160>;
            quick-tap-ms = <0>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&sl>;
        };
        pkey: pkey{
            compatible = "zmk,behavior-tap-dance";
            label = "PKEY";
            #binding-cells = <0>;
            tapping-term-ms = <160>;
            bindings = <&mt LBKT P>, <&mt RBRC MINUS>;
        };
         okey: okey{
            compatible = "zmk,behavior-tap-dance";
            label = "OKEY";
            #binding-cells = <0>;
            tapping-term-ms = <160>;
            bindings = <&mt RBKT O> ;
        };
        lone:lone{
            compatible = "zmk,behavior-tap-dance";
            label = "LONE";
            #binding-cells = <0>;
            tapping-term-ms = <160>;
            bindings = <&stickymt 1 1>, <&tog 1>;
        };
        ltwo:ltwo{
            compatible = "zmk,behavior-tap-dance";
            label = "LTWO";
            #binding-cells = <0>;
            tapping-term-ms = <160>;
            bindings = <&stickymt 2 2>, <&tog 2>;
        };
    };
    combos {
        compatible = "zmk,combos";
        combo_caps{
            timeout-ms = <50>;
            key-positions = <21 30>;
            bindings = <&caps_word>;
        };
        combo_eqls{
            timeout-ms = <50>;
            key-positions = <9 10>;
            bindings = <&kp EQUAL>;
            layers=<0>;
        };
    };
};
/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp Q &kp W &kp E &kp R &kp T                &kp Y &kp U  &kp I     &okey   &pkey  
   &kp A &kp S &kp D &kp F &kp G                &kp H &kp J  &kp K     &kp L   &kp SEMI
   &kp Z &kp X &kp C &kp V &kp B                &kp N &kp M  &kp COMMA &kp DOT &kp FSLH
       &kp LCTRL &kp LGUI &lone &mo 3 &kp RET &ltwo  &kp SPACE &kp BKSP
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp F11      &kp F12      &kp N3       &kp N4       &kp N5         &trans   &kp N7   &kp N8 &kp N9    &kp N0
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp N0   &kp N4   &kp N5 &kp N6    &trans
   &kp LSHIFT    &trans       &trans       &trans     &trans         &trans   &kp N1   &kp N2 &kp N3    &kp RSHIFT
                        &trans  &trans    &kp LGUI     &trans  &kp RSHIFT &kp SPACE &trans   &kp RALT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |
// |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |
// |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
    &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR
    &kp TAB &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH
    &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE
               &trans &trans  &kp LGUI &trans   &kp RSHIFT &kp SPACE &trans    &kp RALT
                        >;
                };

                system_layer {
// -----------------------------------------------------------------------------------------
// |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |
// |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |
// |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
    &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &trans    &trans    &trans &trans    &trans
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &kp LEFT  &kp DOWN  &kp UP &kp RIGHT &kp ENT
    &trans   &trans &trans   &trans   &trans      &kp UNDER &trans    &trans &trans    &trans
               &trans &trans  &kp LGUI &trans   &kp RSHIFT &kp SPACE &BKSP &kp RALT
                        >;
                };
        };
};
